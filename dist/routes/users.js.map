{"version":3,"sources":["../../server/routes/users.js"],"names":["express","require","router","Router","bcrypt","db","post","req","res","newUser","body","payload","collection","find","name","toArray","err","user","length","status","send","genSalt","salt","hash","password","insertOne","findAndModify","$set","loggedIn","upsert","result","new","json","value","compare","match","login","response","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nlet db;\r\n\r\nrouter.post('/addUser', (req, res) => {\r\n  db = req.db;\r\n  const newUser = req.body.payload;\r\n\r\n  db.collection('users').find({name: newUser.name}).toArray((err, user) => {\r\n    if (err) return err;\r\n    if (user.name && user.length > 0) {\r\n      res.status(400).send('invalid');\r\n    } else {\r\n      bcrypt.genSalt(10, (err, salt) => {\r\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n          newUser.password = hash;\r\n\r\n          db.collection('users').insertOne(newUser, () => {\r\n            res.status(201).send(newUser.name);\r\n          });\r\n        });\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.post('/logOut', (req, res) => {\r\n  db = req.db;\r\n  db.collection('users').findAndModify(\r\n    {name: req.body.name},\r\n    {}, // this must be here to work\r\n    {$set: {loggedIn: false}},\r\n    {upsert: true},\r\n    (err, result) => {\r\n      if (err) { return err; }\r\n      res.send(result);\r\n    },\r\n  );\r\n});\r\n\r\nrouter.post('/logIn', (req, res) => {\r\n  db = req.db;\r\n  db.collection('users').findAndModify(\r\n    {name: req.body.name},\r\n    {},\r\n    {$set: {loggedIn: true}},\r\n    {new: true},\r\n    (err, user) => {\r\n      if (err) { res.json(err); }\r\n      if (user.value) {\r\n        bcrypt.compare(req.body.password, user.value.password, (err, match) => {\r\n          if (match) {\r\n            res.json({login: 'success', response: user.value});\r\n          } else {\r\n            res.json({login: 'fail', response: 'Invalid Password'});\r\n          }\r\n        });\r\n      } else {\r\n        res.json({login: 'fail', response: 'Invalid User'});\r\n      }\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}