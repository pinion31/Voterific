{"version":3,"sources":["../../server/routes/users.js"],"names":["express","require","router","Router","bcrypt","ObjectId","db","post","req","res","newUser","body","payload","collection","find","name","toArray","err","user","length","status","json","loggedIn","genSalt","salt","hash","password","insertOne","polls","findAndModify","$set","new","value","compare","match","ObjectIds","map","push","pollId","_id","$in","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst bcrypt = require('bcryptjs');\r\nconst ObjectId = require('mongodb').ObjectId;\r\nlet db;\r\n\r\n//  input: {name: String, password: String, email: String}\r\n//  output: {user: String, loggedIn: Boolean}\r\nrouter.post('/addUser', (req, res) => {\r\n  db = req.db;\r\n  const newUser = req.body.payload;\r\n  db.collection('users').find({name: newUser.name}).toArray((err, user) => {\r\n    if (err) return err;\r\n    if (user.name && user.length > 0) {\r\n      res.status(400).json({user: 'invalid', loggedIn: false});\r\n    } else {\r\n      bcrypt.genSalt(10, (err, salt) => {\r\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n          newUser.password = hash;\r\n\r\n          db.collection('users').insertOne(newUser, () => {\r\n            res.status(201).json({user: newUser.name, loggedIn: true, polls: []});\r\n          });\r\n        });\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.post('/LoginUser', (req, res) => {\r\n  db = req.db;\r\n  db.collection('users').findAndModify(\r\n    {name: req.body.name},\r\n    {},\r\n    {$set: {loggedIn: true}},\r\n    {new: true},\r\n    (err, user) => {\r\n      if (err) { res.json(err); }\r\n      if (user.value.password) {\r\n        bcrypt.compare(req.body.password, user.value.password, (err, match) => {\r\n          if (match) {\r\n            // populate user polls before sending back\r\n            const ObjectIds = [];\r\n            user.value.polls.map(pollId => {\r\n              ObjectIds.push(ObjectId(pollId));\r\n            });\r\n\r\n            db.collection('polls').find({_id: {$in: ObjectIds}}).toArray((err, polls) => {\r\n              if (err) { throw err; }\r\n              res.json({user: user.value.name, loggedIn: true, polls});\r\n            });\r\n          } else {\r\n            res.json({user: 'Invalid Password', loggedIn: false, polls: []});\r\n          }\r\n        });\r\n      } else {\r\n        res.json({user: 'Invalid User', loggedIn: false, polls: []});\r\n      }\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}