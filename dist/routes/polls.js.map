{"version":3,"sources":["../../server/routes/polls.js"],"names":["express","require","router","Router","ObjectId","db","post","req","res","collection","deleteOne","_id","body","id","newPolls","user","polls","pollListToInsertIntoDB","filter","poll","push","findAndModify","name","$set","update","err","console","log","send","insertOne","then","result","owner","$push","insertedId","upsert","response","get","find","toArray","users","forEach","concat","userPoll","params","toString","newChoices","Array","from","choices","module","exports"],"mappings":"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","file":"polls.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst ObjectId = require('mongodb').ObjectId;\r\nlet db;\r\n\r\n// input: {id: String, user:{user:String, polls: Array, loggedIn: Boolean }}\r\n// output: polls:[] (newPolls minus deletedPoll)\r\nrouter.post('/deletePollForUsers', (req, res) => {\r\n  db = req.db;\r\n  db.collection('polls').deleteOne({_id: ObjectId(req.body.id)}, () => {\r\n\r\n    let newPolls = req.body.user.polls;\r\n    const pollListToInsertIntoDB = [];\r\n\r\n    // simultaneously created updated array of _ids to insert into user db\r\n    // and creates new array of polls to send back to client\r\n    newPolls = newPolls.filter((poll) => {\r\n      if (poll._id !== req.body.id) {\r\n        pollListToInsertIntoDB.push(poll._id);  // adds id here\r\n        return poll;\r\n      }\r\n    });\r\n\r\n    // insert new list of ids into user.polls\r\n    db.collection('users').findAndModify(\r\n      {name: req.body.user.user},\r\n      {}, // this must be here to work\r\n      {$set: {polls: pollListToInsertIntoDB}},\r\n      {update: true},\r\n      (err, poll) => {\r\n        if (err) {throw err;}\r\n        console.log('polls 33', newPolls);\r\n        res.send(newPolls); // sends back updated array of polls to client\r\n      });\r\n  });\r\n});\r\n\r\n//* *************ADD POLL***************************\r\n\r\nrouter.post('/addPoll', (req, res) => {\r\n  db = req.db;\r\n  db.collection('polls').insertOne(req.body)\r\n    .then((result) => {\r\n       db.collection('users').findAndModify(\r\n        {name: req.body.owner},\r\n        {}, // this must be here to work\r\n        {$push: {polls: result.insertedId}}, // add _id of new poll to\r\n        {upsert: true},                   // owner poll array\r\n        (err, response) => {\r\n          if (err) { throw err; }\r\n          res.send(req.body); //send poll back\r\n        },\r\n        );\r\n    });\r\n});\r\n\r\n//* *************GET POLLS***************************\r\n\r\n// returns all user polls\r\nrouter.get('/getAllPolls', (req, res) => {\r\n  db = req.db;\r\n  let polls = [];\r\n  db.collection('users').find({}).toArray((err, users) => {\r\n    if (err) { throw err; }\r\n\r\n    users.forEach((user) => {\r\n      polls = polls.concat(user.polls);\r\n    });\r\n\r\n    res.send(polls);\r\n  });\r\n});\r\n\r\nrouter.get('/:name/:id', (req, res) => {\r\n  db = req.db;\r\n  let userPoll = {};\r\n\r\n  db.collection('users').find({name: req.params.name}).toArray((err, user) => {\r\n    if (err) { throw err; }\r\n\r\n    user[0].polls.forEach((poll) => {\r\n      if (poll.id.toString() === req.params.id.toString()) {\r\n        userPoll = poll;\r\n      }\r\n    });\r\n\r\n    res.send(userPoll);\r\n  });\r\n});\r\n\r\n//* *************ANSWER POLL***************************\r\n\r\n// input: {question: String, choices:Array, _id:String, owner:String }\r\n// output: updated poll ({question: String, choices:Array, _id:String, owner:String })\r\nrouter.post('/answerPollForUsers', (req, res) => {\r\n  db = req.db;\r\n  const newChoices = Array.from(req.body.choices);\r\n  db.collection('polls').findAndModify(\r\n    {_id: ObjectId(req.body._id)},\r\n    {},\r\n    {$set:{ choices: newChoices}},\r\n    {update: true},\r\n    (err, poll) => {\r\n      if (err) { throw err; }\r\n      res.send(poll);\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}