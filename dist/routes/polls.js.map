{"version":3,"sources":["../../server/routes/polls.js"],"names":["express","require","router","Router","db","post","req","res","collection","find","name","body","toArray","err","user","userCopy","polls","filter","poll","id","findAndModify","$set","new","upsert","result","send","deleteOne","toString","owner","$push","$inc","counter","insertOne","get","params","map","choices","choice","answer","votes","result2","module","exports"],"mappings":"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","file":"polls.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nlet db;\r\n\r\n\r\nrouter.post('/deletePollForUsers', (req, res) => {\r\n  db = res.db;\r\n\r\n  db.collection('users').find({name: req.body.name})\r\n    .toArray((err, user) => {\r\n      if (err) return err;\r\n      const userCopy = user;\r\n\r\n      userCopy[0].polls = userCopy[0].polls.filter((poll) => {\r\n        if (poll.id !== req.body.id) {\r\n          return poll;\r\n        }\r\n      });\r\n\r\n      db.collection('users').findAndModify(\r\n        {name: req.body.name},\r\n        {},\r\n        {$set: {polls: userCopy[0].polls}},\r\n        {new: true},\r\n        {upsert: true},\r\n        (err, result) => {\r\n          if (err) return err;\r\n          res.send(result);\r\n        },\r\n      );\r\n    });\r\n});\r\n\r\n// delete polls from collective list\r\nrouter.post('/deletePollForAll', (req) => {\r\n  db = res.db;\r\n  db.collection('polls').deleteOne(\r\n    {id: req.body.id.toString(), owner: req.body.name},\r\n    (err) => {\r\n      if (err) { return err; }\r\n    },\r\n  );\r\n});\r\n\r\n//* *************ADD POLL***************************\r\n\r\nrouter.post('/addPoll', (req, res) => {\r\n  db = res.db;\r\n  db.collection('users').findAndModify(\r\n    {name: req.body.owner},\r\n    {}, // this must be here to work\r\n    {$push: {polls: req.body}, $inc: {counter: 1}},\r\n    {upsert: true},\r\n    (err, result) => {\r\n      if (err) { return err; }\r\n      res.send(result);\r\n    },\r\n  );\r\n});\r\n\r\n// adds polls to collective list\r\nrouter.post('/addPollToAll', (req, res) => {\r\n  db = res.db;\r\n  db.collection('polls').insertOne(\r\n    req.body,\r\n    (err, result) => {\r\n      if (err) { return err; }\r\n      res.send(result);\r\n    },\r\n  );\r\n});\r\n\r\n//* *************GET POLLS***************************\r\n\r\n// returns all user polls\r\nrouter.get('/getAllPolls', (req, res) => {\r\n  db = res.db;\r\n  db.collection('polls').find({}).toArray((err, result) => {\r\n    if (err) { return err; }\r\n    res.send(result);\r\n  });\r\n});\r\n\r\nrouter.get('/:name/:id', (req, res) => {\r\n  db = res.db;\r\n  db.collection('polls').find({owner: req.params.name, id: req.params.id}).toArray((err, result) => {\r\n    if (err) { return err; }\r\n    res.send(result);\r\n  });\r\n});\r\n\r\n//* *************ANSWER POLL***************************\r\n\r\nrouter.post('/answerPollForUsers', (req) => {\r\n  db = res.db;\r\n  db.collection('users').find({name: req.body.name}).toArray((err, user) => {\r\n    if (err) return err;\r\n\r\n    const userCopy = user;\r\n    userCopy[0].polls.map((poll) => {\r\n      if (poll.id === req.body.id) {\r\n        poll.choices.map(((choice) => {\r\n          if (choice.choice === req.body.answer) {\r\n            choice.votes++;\r\n          }\r\n        }));\r\n      }\r\n    });\r\n\r\n    db.collection('users').findAndModify(\r\n      {name: req.body.name},\r\n      {},\r\n      {$set: {polls: userCopy[0].polls}},\r\n      {new: true},\r\n      {upsert: true},\r\n      (err) => {\r\n        if (err) return err;\r\n      },\r\n    );\r\n  });\r\n});\r\n\r\nrouter.post('/answerPollForAll', (req, res) => {\r\n  db = res.db;\r\n  db.collection('polls').find(\r\n    {'choices.choice': req.body.answer})\r\n    .toArray(\r\n      (err, result) => {\r\n        if (err) return err;\r\n        const poll = result;\r\n\r\n        poll[0].choices.map((answer) => {\r\n          if (answer.choice === req.body.answer) {\r\n            answer.votes++;\r\n          }\r\n        });\r\n\r\n        db.collection('polls').findAndModify(\r\n          {'choices.choice': req.body.answer},\r\n          {},\r\n          {$set: {choices: poll[0].choices}},\r\n          {new: true},\r\n          {upsert: true},\r\n          (err, result2) => {\r\n            if (err) { throw err; }\r\n            res.send(result2);\r\n          },\r\n        );\r\n      },\r\n    );\r\n});\r\n\r\nmodule.exports = router;\r\n"]}