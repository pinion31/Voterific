{"version":3,"sources":["../../server/routes/polls.js"],"names":["express","require","router","Router","db","post","req","res","collection","find","name","body","toArray","err","user","userCopy","polls","filter","poll","id","findAndModify","$set","new","upsert","result","send","owner","$push","$inc","counter","get","users","forEach","concat","userPoll","params","toString","console","log","map","choices","choice","answer","votes","module","exports"],"mappings":"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","file":"polls.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nlet db;\r\n\r\nrouter.post('/deletePollForUsers', (req, res) => {\r\n  db = req.db;\r\n\r\n  db.collection('users').find({name: req.body.name})\r\n    .toArray((err, user) => {\r\n      if (err) throw err;\r\n      const userCopy = user;\r\n\r\n      userCopy[0].polls = userCopy[0].polls.filter((poll) => {\r\n        if (poll.id !== req.body.id) {\r\n          return poll;\r\n        }\r\n      });\r\n\r\n      db.collection('users').findAndModify(\r\n        {name: req.body.name},\r\n        {},\r\n        {$set: {polls: userCopy[0].polls}},\r\n        {new: true},\r\n        {upsert: true},\r\n        (err, result) => {\r\n          if (err) throw err;\r\n          res.send(result);\r\n        },\r\n      );\r\n    });\r\n});\r\n\r\n//* *************ADD POLL***************************\r\n\r\nrouter.post('/addPoll', (req, res) => {\r\n  db = req.db;\r\n  db.collection('users').findAndModify(\r\n    {name: req.body.owner},\r\n    {}, // this must be here to work\r\n    {$push: {polls: req.body}, $inc: {counter: 1}},\r\n    {upsert: true},\r\n    (err, result) => {\r\n      if (err) { throw err; }\r\n      res.send(result);\r\n    },\r\n  );\r\n});\r\n\r\n//* *************GET POLLS***************************\r\n\r\n// returns all user polls\r\nrouter.get('/getAllPolls', (req, res) => {\r\n  db = req.db;\r\n  let polls = [];\r\n  db.collection('users').find({}).toArray((err, users) => {\r\n    if (err) { throw err; }\r\n\r\n    users.forEach((user) => {\r\n      polls = polls.concat(user.polls);\r\n    });\r\n\r\n    res.send(polls);\r\n  });\r\n});\r\n\r\nrouter.get('/:name/:id', (req, res) => {\r\n  db = req.db;\r\n  let userPoll = {};\r\n\r\n  db.collection('users').find({name: req.params.name}).toArray((err, user) => {\r\n    if (err) { throw err; }\r\n\r\n    user[0].polls.forEach((poll) => {\r\n      if (poll.id.toString() === req.params.id.toString()) {\r\n        console.log(poll);\r\n        userPoll = poll;\r\n      }\r\n    });\r\n\r\n    res.send(userPoll);\r\n  });\r\n});\r\n\r\n//* *************ANSWER POLL***************************\r\n\r\nrouter.post('/answerPollForUsers', (req, res) => {\r\n  db = req.db;\r\n  db.collection('users').find({name: req.body.name}).toArray((err, user) => {\r\n    if (err) throw err;\r\n\r\n    const userCopy = user;\r\n    userCopy[0].polls.map((poll) => {\r\n      if (poll.id === req.body.id) {\r\n        poll.choices.map(((choice) => {\r\n          if (choice.choice === req.body.answer) {\r\n            choice.votes++;\r\n          }\r\n        }));\r\n      }\r\n    });\r\n\r\n    db.collection('users').findAndModify(\r\n      {name: req.body.name},\r\n      {},\r\n      {$set: {polls: userCopy[0].polls}},\r\n      {new: true},\r\n      {upsert: true},\r\n      (err) => {\r\n        if (err) throw err;\r\n      },\r\n    );\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}